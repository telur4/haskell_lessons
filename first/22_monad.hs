-- モナド
-- TODO
-- Applicative型クラスの派生クラスで、returnメソッドと、>>=演算子を持つ
-- returnは通常の値をラッピングされた値に変換する
-- >>=はバインド演算子と呼ばれるもので、ラッピングされた値をラッピングされた値を返す関数に渡す
fn x = return (2 * x)

main = do
    print $ [1, 2, 3] >>= fn
    print $ Just 5 >>= fn
    print $ Nothing >>= fn

{-
モナドには次のようなものがあります。

[]      -- リスト
Maybe   -- Just x または Nothing 値を持つモナド
Either  -- Left a または Right b 値をもつモナド
IO      -- 入出力を司るモナド
State   -- 状態を扱うモナド
Reader  -- 「環境」から値を読み出すモナド
Writer  --  値をログに書き込むモナド

putStrLnやprintなど、IOとつかさどるものは全てもなどとして実装されている。
Haskellは純粋関数型言語なので、k外部から値を読み込んだり、
外部に値を書き出したりなどの副作用持つことができない。
そのため、putStrLnは値を書き出すのではなく、
「値を書き出すというアクション」を返却する。
Haskellのエントリーポイントであるmain関数が、こうした一連のアクションを返却し、GHCなどの処理系が実際の入出力を行う。
-}